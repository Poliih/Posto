Atividade I de Programação de Sistemas II

Um desenvolvedor iniciou a criação de um programa em Java para controlar a quantidade de combustível de um posto de gasolina. O posto possui diversos tipos de combustíveis que precisam ser tratados de forma independente. A seguir veja o código que já foi criado da classe principal do programa:

"
public class Atv1PrSisII
    public static void main(String[] args) (
        int limiteEstoque = 10000;
        Combustivel gasolina = new Combustivel ("Gasolina", limiteEstoque);
        int qtdAposReposicao = gasolina. reporEstoque (1000) ;
        System. out. println ("Qtd Após Reposição " + qtdAposReposicao);
        int qtdRealmenteAbastecidol = gasolina. abastecerVeiculo (51) ;
        System. out.println ("Qtd Abastecida 1 " + qtdRealmenteAbastecidol) ;
        int qtdRealmenteAbastecido2 = gasolina. abastecerVeiculo (10) ;
        System. out. println ("Qtd Abastecida 2 " + qtdRealmenteAbastecido2) ;
        System. out. printIn ("Estoque de Gasolina " + gasolina.mostrarEstoque () ) ;
 "
 Entretanto o desenvolvedor teve um problema em seu computador e não deu tempo de salvar o código no Git e, por conta disso, precisa ser implementada a classe Combustível novamente.

"
packege atv1prisii;

public class Combustivel{
    //Este contúdo foi perdido e precisa ser desenvolvido novamente
    }
"

Desenvolva o código da classe Combustível de forma encapsulada em que todos os atributos sejam privados e os valores sejam manipulados e acessados apenas pelos métodos reporEstoque, abastecerVeiculo, mostrarEstoque.

Fique atento às seguintes regras:

- O estoque não pode ser reposto com valores negativos, neste caso o método deve retornar 0.
- O estoque não pode ser reposto além do limite do estoque que foi definido no construtor da classe. Nesse caso, o método deve retornar o valor que deu para repor, exemplo: tinha-se 10 litros disponíveis, entraram 100, retorne 10 que é o valor disponível, claro, atualizando a quantidade do estoque.
- O abastecimento deve reduzir a quantidade de estoque, deve ser verificado também se há quantidade disponível; caso não haja, deverá retornar apenas a quantidade disponível, diminuindo a quantidade do estoque.
- Não deve aceitar valores negativos para abastecimento; caso isso ocorra, deve retornar o valor 0 do método.
- Mostrar estoque: apenas mostrar a quantidade atual do estoque do objeto.
